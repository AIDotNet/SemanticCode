name: Release Build

on:
  push:
    paths:
      - 'Directory.Packages.props'
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from Directory.Packages.props
        id: get-version
        run: |
          VERSION=$(grep -oP '<Version>\K[^<]+' Directory.Packages.props)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Detected version: $VERSION"

  build-windows:
    needs: prepare
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '10.0.x'

      - name: Setup Inno Setup
        uses: nadeemjazmawe/inno-setup-action-cli@v6.0.5
        with:
          iscc-version: "6.2.2"

      - name: Restore dependencies
        run: dotnet restore SemanticCode.sln

      - name: Build Windows executable
        run: |
          dotnet publish SemanticCode.Desktop/SemanticCode.Desktop.csproj -c Release -r win-x64 --self-contained true -o ./publish/win-x64 -p:DebugType=None -p:DebugSymbols=false

      - name: Remove debug files
        run: |
          cd publish/win-x64
          # Remove .pdb files if any exist
          if (Test-Path "*.pdb") { Remove-Item "*.pdb" }

      - name: Create Windows installer with Inno Setup
        env:
          APP_VERSION: ${{ needs.prepare.outputs.version }}
        run: |
          # Create dist directory
          if (!(Test-Path "dist")) { New-Item -ItemType Directory -Path "dist" }
          # Compile the installer using iscc
          iscc setup/setup.iss

      - name: Create Windows archive (fallback)
        run: |
          cd publish/win-x64
          7z a ../../SemanticCode-${{ needs.prepare.outputs.version }}-win-x64.zip *

      - name: Upload Windows installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: dist/SemanticCode-Setup-${{ needs.prepare.outputs.version }}-win-x64.exe

      - name: Upload Windows archive
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: SemanticCode-${{ needs.prepare.outputs.version }}-win-x64.zip

  build-linux:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '10.0.x'

      - name: Restore dependencies
        run: dotnet restore SemanticCode.sln

      - name: Build Linux executable
        run: |
          dotnet publish SemanticCode.Desktop/SemanticCode.Desktop.csproj -c Release -r linux-x64 --self-contained true -o ./publish/linux-x64 -p:DebugType=None -p:DebugSymbols=false

      - name: Remove debug files and create Linux archive
        run: |
          cd publish/linux-x64
          # Remove .pdb files if any exist
          find . -name "*.pdb" -type f -delete
          tar -czf ../../SemanticCode-${{ needs.prepare.outputs.version }}-linux-x64.tar.gz *

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: SemanticCode-${{ needs.prepare.outputs.version }}-linux-x64.tar.gz

  create-release:
    needs: [prepare, build-windows, build-linux]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download Windows installer
        uses: actions/download-artifact@v4
        with:
          name: windows-installer

      - name: Download Windows archive
        uses: actions/download-artifact@v4
        with:
          name: windows-build

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-build

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.prepare.outputs.version }}
          name: Release v${{ needs.prepare.outputs.version }}
          draft: false
          prerelease: false
          files: |
            SemanticCode-Setup-${{ needs.prepare.outputs.version }}-win-x64.exe
            SemanticCode-${{ needs.prepare.outputs.version }}-win-x64.zip
            SemanticCode-${{ needs.prepare.outputs.version }}-linux-x64.tar.gz